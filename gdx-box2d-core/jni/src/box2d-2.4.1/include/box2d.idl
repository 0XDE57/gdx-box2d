// Math

interface b2Vec2 {
  void b2Vec2();
  void b2Vec2(float x, float y);
  void SetZero();
  void Set(float x, float y);
  [Operator="+="] void op_add([Const, Ref] b2Vec2 v);
  [Operator="-="] void op_sub([Const, Ref] b2Vec2 v);
  [Operator="*="] void op_mul(float s);
  float Length();
  float LengthSquared();
  float Normalize();
  boolean IsValid();
  [Value] b2Vec2 Skew();
  attribute float x;
  attribute float y;
};

interface b2Vec3 {
  void b2Vec3();
  void b2Vec3(float x, float y, float z);
  void SetZero();
  void Set(float x, float y, float z);
  [Operator="+="] void op_add([Const, Ref] b2Vec3 v);
  [Operator="-="] void op_sub([Const, Ref] b2Vec3 v);
  [Operator="*="] void op_mul(float s);
  attribute float x;
  attribute float y;
  attribute float z;
};

interface b2Mat22 {
  void b2Mat22();
  void b2Mat22([Ref] b2Vec2 c1, [Ref] b2Vec2 c2);
  void b2Mat22(float a11, float a12, float a21, float a22);
  void Set([Ref] b2Vec2 c1, [Ref] b2Vec2 c2);
  void SetIdentity();
  void SetZero();
  [Value] b2Mat22 GetInverse();
  [Value] b2Vec2 Solve([Ref] b2Vec2 b);

  [Value] attribute b2Vec2 ex;
  [Value] attribute b2Vec2 ey;
};

interface b2Mat33 {
  void b2Mat33();
  void b2Mat33([Ref] b2Vec3 c1, [Ref] b2Vec3 c2, [Ref] b2Vec3 c3);
  void SetZero();
  [Value] b2Vec3 Solve33([Ref] b2Vec3 b);
  [Value] b2Vec2 Solve22([Ref] b2Vec2 b);
  void GetInverse22(b2Mat33 M);
  void GetSymInverse33(b2Mat33 M);

  [Value] attribute b2Vec3 ex;
  [Value] attribute b2Vec3 ey;
  [Value] attribute b2Vec3 ez;
};

interface b2Rot {
  void b2Rot();
  void b2Rot(float angle);
  void Set(float angle);
  void SetIdentity();
  float GetAngle();
  [Value] b2Vec2 GetXAxis();
  [Value] b2Vec2 GetYAxis();
  attribute float s;
  attribute float c;
};

interface b2Transform {
  void b2Transform();
  void b2Transform([Ref] b2Vec2 position, [Ref] b2Rot rotation);
  void SetIdentity();
  void Set([Ref] b2Vec2 position, float angle);
  [Value] attribute b2Vec2 p;
  [Value] attribute b2Rot q;
};

// Collision
interface b2ContactFeature {};
interface b2ContactID {};
interface b2ManifoldPoint {};
interface b2Manifold {};
interface b2WorldManifold {};
interface b2RayCastInput {};
interface b2RayCastOutput {};

// Collision Shapes
interface b2Shape {
  b2ShapeType GetType();
  long GetChildCount();
  boolean TestPoint([Ref] b2Transform xf, [Ref] b2Vec2 p);
  boolean RayCast(b2RayCastOutput output, [Ref] b2RayCastInput input, [Ref] b2Transform transform, long childIndex);
  void ComputeAABB(b2AABB aabb, [Ref]] b2Transform xf, long childIndex);
  void ComputeMass(b2MassData massData, float density);
  attribute b2ShapeType m_type;
  attribute float m_radius;
};

interface b2ShapeType {
  "b2Shape::e_circle",
  "b2Shape::e_edge",
  "b2Shape::e_polygon",
  "b2Shape::e_chain",
  "b2Shape::e_typeCount"
};

interface b2MassData {
  void b2MassData();
  attribute float mass;
  [Value] attribute b2Vec2 center;
  attribute float I;
};

interface b2ChainShape {};
interface b2CircleShape {};
interface b2EdgeShape {};
interface b2PolygonShape {};

// Dynamics
interface b2Body {};

interface b2Contact {};

interface b2Fixture {};
interface b2FixtureDef {};

interface b2World {};

interface b2Joint {};
interface b2JointDef {};

interface b2DistanceJoint {};
interface b2DistanceJointDef {};

interface b2FrictionJoint {};
interface b2FrictionJointDef {};

interface b2GearJoint {};
interface b2GearJointDef {};

interface b2MotorJoint {};
interface b2MotorJointDef {};

interface b2MouseJoint {};
interface b2MouseJointDef {};

interface b2PrismaticJoint {};
interface b2PrismaticJointDef {};

interface b2PulleyJoint {};
interface b2PulleyJointDef {};

interface b2RevoluteJoint {};
interface b2RevoluteJointDef {};

interface b2WeldJoint {};
interface b2WeldJointDef {};

interface b2WheelJoint {};
interface b2WheelJointDef {};

// World Callbacks
interface b2ContactFilter {};
interface b2ContactListener {};
interface b2QueryCallback {};
interface b2RayCastCallback {};